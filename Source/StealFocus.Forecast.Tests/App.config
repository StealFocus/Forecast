<?xml version="1.0"?>
<configuration>

  <configSections>
    <section name="stealFocusForecastConfiguration" type="StealFocus.Forecast.Configuration.StealFocusForecastConfiguration, StealFocus.Forecast"/>
  </configSections>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0" />
  </startup>

  <!--
    Assign alternative configuration source to get from a database or similar.
    Implement "StealFocus.Forecast.Configuration.IConfigurationSource, StealFocus.Forecast" and configure as follows:
    
    <stealFocusForecastConfiguration 
      xmlns="urn:StealFocus.Forecast.Configuration" 
      configurationSourceType="MyAssembly.MyNamespace.MyConfigurationSource, MyAssembly" />
  -->
  
  <stealFocusForecastConfiguration 
    xmlns="urn:StealFocus.Forecast.Configuration" 
    customConfigurationSourceType="StealFocus.Forecast.Configuration.ConfigSectionConfigurationSource, StealFocus.Forecast">
    <scheduleDefinitions>
      <!-- 
        Define schedules for use below.
        
        name                              = free text, must be unique with the collection.
        day - name                        = the day of the week, must match the "System.DayOfWeek" enumeration.
        day - startTime                   = hh:mm:ss
        day - endTime                     = hh:mm:ss
      -->
      <scheduleDefinition name="MorningOutOfHours">
        <days>
          <day name="Monday" startTime="00:00:00" endTime="07:59:59" />
          <day name="Tuesday" startTime="00:00:00" endTime="07:59:59" />
          <day name="Wednesday" startTime="00:00:00" endTime="07:59:59" />
          <day name="Thursday" startTime="00:00:00" endTime="07:59:59" />
          <day name="Friday" startTime="00:00:00" endTime="07:59:59" />
        </days>
      </scheduleDefinition>
      <scheduleDefinition name="BusinessHours">
        <days>
          <day name="Monday" startTime="08:00:00" endTime="18:00:00" />
          <day name="Tuesday" startTime="08:00:00" endTime="18:00:00" />
          <day name="Wednesday" startTime="08:00:00" endTime="18:00:00" />
          <day name="Thursday" startTime="08:00:00" endTime="18:00:00" />
          <day name="Friday" startTime="08:00:00" endTime="18:00:00" />
        </days>
      </scheduleDefinition>
      <scheduleDefinition name="EveningOutOfHours">
        <days>
          <day name="Monday" startTime="18:00:01" endTime="23:59:59" />
          <day name="Tuesday" startTime="18:00:01" endTime="23:59:59" />
          <day name="Wednesday" startTime="18:00:01" endTime="23:59:59" />
          <day name="Thursday" startTime="18:00:01" endTime="23:59:59" />
          <day name="Friday" startTime="18:00:01" endTime="23:59:59" />
        </days>
      </scheduleDefinition>
      <scheduleDefinition name="Weekend">
        <days>
          <day name="Saturday" startTime="00:00:00" endTime="23:59:59" />
          <day name="Sunday" startTime="00:00:00" endTime="23:59:59" />
        </days>
      </scheduleDefinition>
    </scheduleDefinitions>
    <windowsAzure>
      <subscriptions>
        <!--
          Specify your subscription information here.
        
          id                            = free text, must be unique with the collection.
          subscriptionId                = Your Azure Subscription ID (a valid GUID).
          certificateThumbprint         = The thumbprint for a configured management certificate, the thumprint must 
                                          be stored in the "Personal" certificate store of the account running the 
                                          process, 40 alpha-numeric characters.
        -->
        <subscription
          id="myArbitraryAzureSubscriptionName"
          subscriptionId="13408C03-E96F-4768-B3F8-BFE0CAB7EBC9"
          certificateThumbprint="0000000000000000000000000000000000000000" />
      </subscriptions>
      <hostedService>
        <packages>
          <!-- 
            Specify package details. Any packages must be already uploaded to the 
            blob in the Azure Storage Account.
        
            id                            = free text, must be unique with the collection.
            storageAccountName            = must match a valid Azure storage account name e.g. "http://[storageAccountName].blob.core.windows.net/".
            containerName - name          = the name of the container.
            blobName - name               = the name of the blob holding the package e.g. "MyPackage.cspkg".
          -->
          <package
            id="myArbitraryPackageName"
            storageAccountName="myAzureStorageAccountName"
            containerName="MyContainer"
            blobName="MyPackage.cspkg" />
        </packages>
        <!-- 
          Specify a white list of services, any other services found in the configured Windows 
          Azure Subscriptions will have any deployments deleted.
        
          pollingIntervalInMinutes            = the polling interval between checking services.
          includeDeploymentDeleteServices     = whether to include in the whitelist the services configured for deployment delete.
          includeDeploymentCreateServices     = whether to include in the whitelist the services configured for deployment create.
          includeHorizontalScaleServices      = whether to include in the whitelist the services configured for horizontal scaling.
          service - name                      = the name of the service to include in the whitelist.
          service - role - name
          service - role - maxInstanceSize    = the maximum instance size allowed, [ExtraSmall|Small|Medium|Large|ExtraLarge] (optional).
          service - role - maxInstanceCount   = the maximum instance count allowed (optional).
        -->
        <whiteList
          pollingIntervalInMinutes="60"
          includeDeploymentDeleteServices="true"
          includeDeploymentCreateServices="true"
          includeHorizontalScaleServices="true">
          <service name="myAzureServiceName1">
            <roles>
              <role name="myAzureServiceRoleName1" maxInstanceSize="Medium" maxInstanceCount="1" />
              <role name="myAzureServiceRoleName2" maxInstanceSize="ExtraSmall" maxInstanceCount="2" />
            </roles>
          </service>
          <service name="myAzureServiceName2">
            <roles>
              <role name="myAzureServiceRoleName3" />
            </roles>
          </service>
        </whiteList>
        <deploymentDeletes>
          <!-- 
            Delete specified deployment instances of the specified service name 
            in the specified schedule(s), checking every x mins within those 
            periods, using the named subscription.
        
            serviceName                       = must match a valid Azure service name e.g. "http://[serviceName].cloudapp.net/", must be uniqiue per "windowsAzureDeploymentCreate" entry.
            subscriptionConfigurationId       = must match a configured "windowsAzureSubscription" ID above.
            pollingIntervalInMinutes          = the polling interval between checking for the existence of the specified deployment.
            deploymentSlot - name             = valid Azure deployment slot name i.e. "Staging" or "Production".
            schedule - scheduleDefinitionName = the name of the schedule definition (defined above).
          -->
          <deploymentDelete
            serviceName="myAzureServiceName"
            pollingIntervalInMinutes="10"
            subscriptionConfigurationId="myArbitraryAzureSubscriptionName">
            <deploymentSlots>
              <deploymentSlot name="Staging" />
              <deploymentSlot name="Production" />
            </deploymentSlots>
            <schedules>
              <schedule scheduleDefinitionName="MorningOutOfHours" />
              <schedule scheduleDefinitionName="EveningOutOfHours" />
              <schedule scheduleDefinitionName="Weekend" />
            </schedules>
          </deploymentDelete>
        </deploymentDeletes>
        <deploymentCreates>
          <!-- 
            Ensure the specified service is created in the specified schedule(s), 
            checking every x mins within those periods, using the named subscription.
        
            subscriptionConfigurationId       = must match a configured "windowsAzureSubscription" ID above.
            windowsAzurePackageId             = must match a configured "windowsAzurePackage" ID above.
            serviceName                       = must match a valid Azure service name e.g. "http://[serviceName].cloudapp.net/", must be uniqiue per "windowsAzureDeploymentCreate" entry.
            deploymentName                    = free text (no spaces).
            deploymentLabel                   = free text.
            deploymentSlot                    = valid Azure deployment slot name i.e. "Staging" or "Production".
            packageConfigurationFilePath      = the path to the ".cscfg" file.
            treatWarningsAsError              = whether to treat any warnings as errors, true|false
            startDeployment                   = whether to start after deployment, true|false
            pollingIntervalInMinutes          = the polling interval between checking for the existence of the specified deployment.
            schedule - scheduleDefinitionName = the name of the schedule definition (defined above).  
          -->
          <deploymentCreate
            subscriptionConfigurationId="myArbitraryAzureSubscriptionName"
            windowsAzurePackageId="myArbitraryPackageName"
            serviceName="myAzureServiceName"
            deploymentName="MyName"
            deploymentLabel="MyLabel"
            deploymentSlot="Production"
            packageConfigurationFilePath="C:\PathTo\MyPackageConfiguration.cscfg"
            treatWarningsAsError="true"
            startDeployment="true"
            pollingIntervalInMinutes="10">
            <schedules>
              <schedule scheduleDefinitionName="BusinessHours" />
            </schedules>
          </deploymentCreate>
        </deploymentCreates>
        <scheduledHorizontalScales>
          <!-- 
            Ensure the specified service scaled out to the specified number of instances during the specified schedule(s), 
            checking every x mins within those periods, using the named subscription.
        
            id                                = free text, must be unique with the collection.
            subscriptionConfigurationId       = must match a configured "windowsAzureSubscription" ID above.
            windowsAzurePackageId             = must match a configured "windowsAzurePackage" ID above.
            serviceName                       = must match a valid Azure service name e.g. "http://[serviceName].cloudapp.net/", must be uniqiue per "windowsAzureDeploymentCreate" entry.
            deploymentSlot                    = valid Azure deployment slot name i.e. "Staging" or "Production".
            treatWarningsAsError              = whether to treat any warnings as errors, true|false
            mode                              = Auto|Manual
            pollingIntervalInMinutes          = the polling interval between checking for the existence of the specified deployment.
            horizontalScale - roleName        = the "role name" in the Windows Azure Hosted Service (should match the value in the .cscfg).
            horizontalScale - instanceCount   = the number of instances of the service required.
            schedule - scheduleDefinitionName = the name of the schedule definition (defined above).  
          -->
          <scheduledHorizontalScale
            id="myArbitraryId1"
            subscriptionConfigurationId="myArbitraryAzureSubscriptionName"
            serviceName="myAzureServiceName"
            deploymentSlot="Production"
            treatWarningsAsError="true"
            mode="Auto"
            pollingIntervalInMinutes="30">
            <horizontalScales>
              <horizontalScale roleName="myAzureServiceRoleName" instanceCount="4" />
            </horizontalScales>
            <schedules>
              <schedule scheduleDefinitionName="BusinessHours" />
            </schedules>
          </scheduledHorizontalScale>
          <scheduledHorizontalScale
            id="myArbitraryId2"
            subscriptionConfigurationId="myArbitraryAzureSubscriptionName"
            serviceName="myAzureServiceName"
            deploymentSlot="Production"
            treatWarningsAsError="true"
            mode="Auto"
            pollingIntervalInMinutes="30">
            <horizontalScales>
              <horizontalScale roleName="myAzureServiceRoleName" instanceCount="1" />
            </horizontalScales>
            <schedules>
              <schedule scheduleDefinitionName="MorningOutOfHours" />
              <schedule scheduleDefinitionName="EveningOutOfHours" />
              <schedule scheduleDefinitionName="Weekend" />
            </schedules>
          </scheduledHorizontalScale>
        </scheduledHorizontalScales>
      </hostedService>
      <storageService>
        <storageAccounts>
          <!--
            storageAccountName                = must match a valid Azure service name e.g. "http://[storageAccountName].[blob|queue|table].core.windows.net/".
            storageAccountKey                 = the Azure Storage Account Key.
          -->
          <storageAccount
            storageAccountName="myStorageAccountName"
            storageAccountKey="myStorageAccountKey" />
        </storageAccounts>
        <tableDeletes>
          <!-- 
            Ensure the specified Azure Storage Tables are deleted in the specified schedule(s), 
            checking every x mins within those periods.
        
            id                                = free text, must be uniqiue per "windowsAzureTableDelete" entry.
            storageAccountName                = must match a valid Azure storage account listed above.
            pollingIntervalInMinutes          = the polling interval between ensuring deletion.
            storageTable - tableName          = the name of table to delete.
            schedule - scheduleDefinitionName = the name of the schedule definition (defined above).
          -->
          <tableDelete
            id="myArbitraryTableDeleteId"
            storageAccountName="myStorageAccountName"
            pollingIntervalInMinutes="60">
            <storageTables>
              <storageTable tableName="myAzureTableName1" />
              <storageTable tableName="myAzureTableName2" />
            </storageTables>
            <schedules>
              <schedule scheduleDefinitionName="MorningOutOfHours" />
              <schedule scheduleDefinitionName="EveningOutOfHours" />
              <schedule scheduleDefinitionName="Weekend" />
            </schedules>
          </tableDelete>
        </tableDeletes>
        <blobContainerDeletes>
          <!-- 
            Ensure the specified Azure Storage Blob Containers are deleted in the specified schedule(s), 
            checking every x mins within those periods.
        
            id                                = free text, must be uniqiue per "windowsAzureBlobContainerDelete" entry.
            storageAccountName                = must match a valid Azure storage account listed above.
            pollingIntervalInMinutes          = the polling interval between ensuring deletion.
            storageTable - tableName          = the name of blob container to delete.
            schedule - scheduleDefinitionName = the name of the schedule definition (defined above).
          -->
          <blobContainerDelete
            id="myArbitraryBlobContainerDeleteId"
            storageAccountName="myStorageAccountName"
            pollingIntervalInMinutes="60">
            <blobContainers>
              <blobContainer blobContainerName="myAzureBlobContainerName1" />
              <blobContainer blobContainerName="myAzureBlobContainerName2" />
            </blobContainers>
            <schedules>
              <schedule scheduleDefinitionName="MorningOutOfHours" />
              <schedule scheduleDefinitionName="EveningOutOfHours" />
              <schedule scheduleDefinitionName="Weekend" />
            </schedules>
          </blobContainerDelete>
        </blobContainerDeletes>
      </storageService>
    </windowsAzure>
  </stealFocusForecastConfiguration>

  <!--<system.net>
    <defaultProxy
			enabled="true"
			useDefaultCredentials="true">
      <proxy
				bypassonlocal="true"
				proxyaddress="http://myProxy:8080/" />
    </defaultProxy>
  </system.net>-->

</configuration>
